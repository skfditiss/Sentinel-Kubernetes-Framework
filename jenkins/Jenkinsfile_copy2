pipeline {
    agent any

    environment {
        IMAGE_NAME = "skfditiss/zta"
        IMAGE_TAG = "latest"
        KUBE_NAMESPACE = "default"
        CHART_NAME = "zta"
        SONARQUBE_URL = "http://localhost:9000"
        PROMETHEUS_URL = "http://localhost:9090"
        GRAFANA_URL = "http://localhost:3000"
        GITHUB_CREDENTIALS_ID = "github"
        SONAR_SCANNER_HOME = '/opt/sonar-scanner'
        PATH = "${SONAR_SCANNER_HOME}/bin:${env.PATH}"
        SONAR_TOKEN = "squ_0520eea0a041ee90b18e77560d944458471278c0"
    }

    stages {
        stage('Clone & Pull Latest Code') {
            steps {
                script {
                    cleanWs()
                    withCredentials([usernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                        sh '''
                            if [ -d "zta" ]; then
                                echo "Repository exists. Pulling latest changes..."
                                cd zta
                                git pull origin main
                            else
                                echo "Cloning repository..."
                                git clone https://github.com/skfditiss/zta.git
                                cd zta
                            fi
                        '''
                    }
                }
            }
        }

        stage('Start Minikube') {
            steps {
                script {
                    def minikubeStatus = sh(script: "minikube status || echo 'stopped'", returnStdout: true).trim()
                    if (minikubeStatus.contains("stopped")) {
                        sh '''
                            export MINIKUBE_HOME=$HOME/.minikube
                            export KUBECONFIG=$HOME/.kube/config
                            sudo minikube start --driver=none --memory=8000mb --cpus=3 --force
                        '''
                    }
                    sh 'kubectl config use-context minikube'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -f zta/Dockerfile ."
                }
            }
        }

        stage('Deploy SonarQube') {
            steps {
                script {
                    sh 'kubectl apply -f ./zta/deployment/sonarqube.yaml'
                    sh 'kubectl apply -f ./zta/deployment/sonarqube-service.yaml'
                }
            }
        }

        stage('Modify Prometheus to Scrape SonarQube Logs') {
            steps {
                script {
                    sh 'kubectl apply -f ./zta/deployment/prometheus-config.yaml'
                    sh 'kubectl delete pod -n default -l app=prometheus || true'
                }
            }
        }

        stage('SonarQube Scan') {
            steps {
                script {
                    withSonarQubeEnv('sonar') {
                        sh "sonar-scanner -Dsonar.projectKey=zta -Dsonar.sources=. -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONAR_TOKEN}"
                    }
                }
            }
        }

        stage('Trivy Security Scan') {
            steps {
                script {
                    sh "trivy image ${IMAGE_NAME}:${IMAGE_TAG} || true"
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                withDockerRegistry([credentialsId: 'dockerhub_idpass', url: 'https://index.docker.io/v1/']) {
                    sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Deploy to Kubernetes with Helm') {
            steps {
                script {
                    sh 'kubectl apply -f ./zta/deployment/prometheus-deployment.yaml'
                    sh 'kubectl apply -f ./zta/deployment/prometheus-service.yaml'
                    sh 'kubectl apply -f ./zta/deployment/prometheus-config.yaml'
                    sh 'kubectl apply -f ./zta/deployment/grafana-deployment.yaml'
                    sh 'kubectl apply -f ./zta/deployment/grafana-service.yaml'
                    sh 'kubectl apply -f ./zta/deployment/grafana-datasource.yaml'
                    sh 'kubectl apply -f ./zta/deployment/opa.yaml'
                    sh 'kubectl apply -f ./zta/deployment/opa-service.yaml'
                    sh 'kubectl apply -f ./zta/deployment/falco-deployment.yaml'
                    sh 'kubectl apply -f ./zta/deployment/falco-service.yaml'

                    sh "helm upgrade --install ${CHART_NAME} ./zta/helm/ --namespace ${KUBE_NAMESPACE}"
                }
            }
        }

        stage('Expose Service & Verify Deployment') {
            steps {
                script {
                    sh "kubectl get pods -n ${KUBE_NAMESPACE}"
                    sh "kubectl get svc -n ${KUBE_NAMESPACE}"
                    def minikubeIP = sh(script: "minikube ip", returnStdout: true).trim()
                    echo "Access your application at: http://${minikubeIP}:30000/"
                }
            }
        }

        stage('Port Forwarding') {
            steps {
                script {
                    sh "kubectl port-forward svc/zta-service 80:30000 -n ${KUBE_NAMESPACE} &"
                    sh "kubectl port-forward svc/sonarqube-service 9000:30350 -n ${KUBE_NAMESPACE} &"
                    sh "kubectl port-forward svc/prometheus 9090:9090 -n ${KUBE_NAMESPACE} &"
                    sh "kubectl port-forward svc/grafana 3000:3000 -n ${KUBE_NAMESPACE} &"
                }
            }
        }

        stage('Check Logs & Metrics') {
            steps {
                script {
                    sh "kubectl port-forward svc/prometheus 9090:9090 --namespace=${KUBE_NAMESPACE} &"
                    sh "curl ${PROMETHEUS_URL}/api/v1/query?query=up"
                    sh "kubectl port-forward svc/grafana 3000:3000 --namespace=${KUBE_NAMESPACE} &"
                    sh "curl ${GRAFANA_URL}/api/datasources/proxy/1/api/v1/query?query=up"
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
